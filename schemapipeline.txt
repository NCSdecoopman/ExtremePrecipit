flowchart LR

    %% --- STYLES ----------------------------------------------------
    classDef source    fill:#e3f2fd,stroke:#2196f3,stroke-width:1px,color:#0d47a1;
    classDef etl       fill:#fce4ec,stroke:#e91e63,stroke-width:1px,color:#880e4f;
    classDef zarr      fill:#fff8e1,stroke:#ffc107,stroke-width:1px,color:#ff6f00;
    classDef meta      fill:#ede7f6,stroke:#673ab7,stroke-width:1px,color:#311b92;
    classDef analytic  fill:#e8f5e9,stroke:#4caf50,stroke-width:1px,color:#1b5e20;
    classDef app       fill:#e1f5fe,stroke:#03a9f4,stroke-width:1px,color:#01579b;
    classDef cicd      fill:#eceff1,stroke:#607d8b,stroke-width:1px,color:#37474f;
    classDef hf        fill:#f3e5f5,stroke:#8e24aa,stroke-width:1px,color:#4a148c;
    classDef DATALAKE   fill:#ead7ff,stroke:#ba8cff,stroke-width:1px,color:#5e35b1;
    classDef qmd       fill:#e1f5fe,stroke:#03a9f4,stroke-width:1px,color:#01579b;
    classDef enregistrement fill:#e0f7fa,stroke:#006064,stroke-width:3px,color:#004d40;
    classDef textSmall font-size:10px;

    %% --- ENREGISTREMENT ---------------------------------------------------
    subgraph ENRE["üåßÔ∏è METEOFRANCE"]
        direction TB
        REC["Enregistrement des donn√©es et mod√©lisation"]:::etl
    end

    subgraph ETL
        %% --- SOURCES ---------------------------------------------------
        subgraph S["üóÇÔ∏è Donn√©es sources"]
            direction TB
            AROME(("üü¶<br/>Mod√®le AROME")):::source
            STATIONS(("üü©<br/>Relev√©s stations")):::source
        end

        %% --- ETL -------------------------------------------------------
        subgraph E["‚öôÔ∏è Pipeline<br/><span class='textSmall'>scale ‚Ä¢ fill ‚Ä¢ int</span>"]
            direction TB
            ETL_AROME[".nc ‚Üí .zarr"]:::etl
            ETL_STATIONS[".csv ‚Üí .zarr"]:::etl
        end

        %% --- ZARR STORAGE ---------------------------------------------
        subgraph Z["üì¶ .zarr"]
            direction TB
            ZA["√âchelle horaire"]:::zarr
            ZS["√âchelle journali√®re"]:::zarr
        end
    end

    subgraph DATALAKE
        %% --- METADATA --------------------------------------------------
        subgraph M["üß≠ M√©tadonn√©es"]
            direction TB
            META_GRID["Identifiant&nbsp;‚Üî&nbsp;GPS"]:::meta
            META_MATCH["Station&nbsp;‚Üî&nbsp;Grille AROME"]:::meta
        end

        %% --- ANALYTICS -------------------------------------------------
        subgraph A["üìä Statistiques"]
            direction TB
            STATS["Statistiques .parquet"]:::analytic
            GEV["Mod√®les GEV<br/>Niveaux de retour"]:::analytic
        end
    end



    %% --- CI/CD & DEPLOYMENT ---------------------------------------

    subgraph CD["üîÅ CI/CD & D√©ploiement"]
        direction TB
        HF_DATASET["HF Dataset"]:::hf
        DEV["Repo GitHub"]:::cicd
        CI["GitHub Actions"]:::cicd
        DOCKER["üê≥ Image Docker"]:::cicd
        PUBLISH["üíª Pr√©sentation<br/>http://..."]:::cicd
        

        %% --- PRESENTATION ---------------------------------------
        subgraph QMD["üìö Quarto"]
            direction TB
            HTML["Pr√©sentation"]:::cicd
        end

    end

        %% --- APPS (frontend logique) ----------------------------------
    subgraph HF_SPACE
        subgraph APP["üåê Apps Streamlit http://..."]
            direction TB
            CONFIG["Config"]:::app
            MAP_APP["Cartographie"]:::app
            SCATTER_APP["Scatter plot"]:::app
            METRICS["M√©triques"]:::app
        end
    end



    %% --- CLIENT ----------------------------------------------
    CLIENT["Utilisation client"]:::cicd

    %% --- FLOWS (donn√©es) ------------------------------------------
    ENRE --> S
    AROME --> ETL_AROME --> ZA
    STATIONS --> ETL_STATIONS --> ZS
    STATIONS --> ETL_STATIONS --> ZA

    ETL_AROME --> META_GRID
    ETL_AROME --> META_MATCH
    ETL_STATIONS --> META_GRID
    ETL_STATIONS --> META_MATCH

    ZA --> STATS
    ZS --> STATS
    STATS --> GEV

    %% --- Publication des stats vers HF Dataset
    DATALAKE --> HF_DATASET

    %% --- CI/CD pipeline -------------------------------------------
    CI --> DOCKER --> HF_SPACE

    %% --- HF Space consomme dataset et expose les apps -------------
    HF_DATASET --> DOCKER
    HF_SPACE --> APP

    CONFIG --> MAP_APP
    CONFIG --> SCATTER_APP
    SCATTER_APP --> METRICS

    DATALAKE --> QMD
    QMD --> DEV
    CI --> PUBLISH

    APP --> CLIENT
    PUBLISH --> CLIENT
    CLIENT --> CONFIG

    DEV --> |"push"| CI    